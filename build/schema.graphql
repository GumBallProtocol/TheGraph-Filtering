type Collection @entity {
  id: ID!
  tokenLibrary: Bytes!
  tokenProxy: Bytes!
  gumballProxy: Bytes!
  tokenDeployed: Bytes!
  name: String
  symbol: String
  price: BigInt!
  index: BigInt!
  totalSupply: BigInt!
  supplyCap: BigInt!
  reserveGBT: BigInt!
  gumbar: Bytes!
  factory: Bytes!
  address: Bytes!
  whitelist: Boolean!
  baseURI: String!
  volume: BigDecimal!
  minted: BigInt!
  artist: Bytes!
  rewards: [Reward!]
  collectionMeta: CollectionMeta
  ipfsHash: String
}

type Trade @entity {
  id: ID!
  amount: BigInt!
  currentPrice: BigInt!
  timestamp: BigInt
  eventType: String!
  collection: Bytes!
  name: String!
  user: Bytes!
}

type Swap @entity {
  id: ID!
  sender: Bytes! # address
  amount: BigInt!
  eventType: String!
  collection: Bytes!
}

type Token @entity {
  id: ID!
  tokenId: BigInt!
  tokenURI: String!
  collection: Bytes!
  imageURI: String!
  name: String!
  available: Boolean!
  owner: Bytes!
  attributes: [TokenAttribute!]! @derivedFrom(field: "token")
  baseURI: String
  staked: Boolean!
  timestamp: BigInt!
}

type Interval @entity {
  id: ID!
  time_frame: String!
  timestamp: String!
  collection: Bytes!
  trade_count: BigInt!
  price_sum: BigInt!
  average_price: BigInt!
  buy_events: BigInt!
  sell_events: BigInt!
}

type Reward @entity {
  id: ID!
  total: BigInt!
  tokenAddress: Bytes!
}

type CollectionMeta @entity {
  id: ID!
  collection: Collection!
  image: String
  name: String
  description: String
  content: String
}

type TokenAttribute @entity {
  id: ID!
  token: Token!
  attribute: String
  value: String
}

type _Schema_
  @fulltext(
    name: "collectionSearch"
    language: en
    algorithm: proximityRank
    include: [{ entity: "Collection", fields: [{ name: "name" }] }]
  )
