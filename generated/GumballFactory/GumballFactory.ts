// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AllowExisting extends ethereum.Event {
  get params(): AllowExisting__Params {
    return new AllowExisting__Params(this);
  }
}

export class AllowExisting__Params {
  _event: AllowExisting;

  constructor(event: AllowExisting) {
    this._event = event;
  }

  get index(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _bool(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class FactoryAllowlistUpdate extends ethereum.Event {
  get params(): FactoryAllowlistUpdate__Params {
    return new FactoryAllowlistUpdate__Params(this);
  }
}

export class FactoryAllowlistUpdate__Params {
  _event: FactoryAllowlistUpdate;

  constructor(event: FactoryAllowlistUpdate) {
    this._event = event;
  }

  get _factory(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get flag(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class GBTFactorySet extends ethereum.Event {
  get params(): GBTFactorySet__Params {
    return new GBTFactorySet__Params(this);
  }
}

export class GBTFactorySet__Params {
  _event: GBTFactorySet;

  constructor(event: GBTFactorySet) {
    this._event = event;
  }

  get gbtFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GNFTFactorySet extends ethereum.Event {
  get params(): GNFTFactorySet__Params {
    return new GNFTFactorySet__Params(this);
  }
}

export class GNFTFactorySet__Params {
  _event: GNFTFactorySet;

  constructor(event: GNFTFactorySet) {
    this._event = event;
  }

  get gnftFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GumBallAdded extends ethereum.Event {
  get params(): GumBallAdded__Params {
    return new GumBallAdded__Params(this);
  }
}

export class GumBallAdded__Params {
  _event: GumBallAdded;

  constructor(event: GumBallAdded) {
    this._event = event;
  }

  get _gbt(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _gnft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _xgbt(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class GumBallDeployed extends ethereum.Event {
  get params(): GumBallDeployed__Params {
    return new GumBallDeployed__Params(this);
  }
}

export class GumBallDeployed__Params {
  _event: GumBallDeployed;

  constructor(event: GumBallDeployed) {
    this._event = event;
  }

  get gbt(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get gnft(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get xgbt(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TreasurySet extends ethereum.Event {
  get params(): TreasurySet__Params {
    return new TreasurySet__Params(this);
  }
}

export class TreasurySet__Params {
  _event: TreasurySet;

  constructor(event: TreasurySet) {
    this._event = event;
  }

  get _treasury(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class XGBTFactorySet extends ethereum.Event {
  get params(): XGBTFactorySet__Params {
    return new XGBTFactorySet__Params(this);
  }
}

export class XGBTFactorySet__Params {
  _event: XGBTFactorySet;

  constructor(event: XGBTFactorySet) {
    this._event = event;
  }

  get xgbtFactory(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class GumballFactory__deployInfoResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getToken(): Address {
    return this.value0;
  }

  getNft(): Address {
    return this.value1;
  }

  getGumbar(): Address {
    return this.value2;
  }

  get_allowed(): boolean {
    return this.value3;
  }
}

export class GumballFactory__gumballsResult {
  value0: Address;
  value1: Address;
  value2: Address;
  value3: boolean;

  constructor(
    value0: Address,
    value1: Address,
    value2: Address,
    value3: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getGBT(): Address {
    return this.value0;
  }

  getGNFT(): Address {
    return this.value1;
  }

  getXGBT(): Address {
    return this.value2;
  }

  getAllowed(): boolean {
    return this.value3;
  }
}

export class GumballFactory extends ethereum.SmartContract {
  static bind(address: Address): GumballFactory {
    return new GumballFactory("GumballFactory", address);
  }

  GBTFactory(): Address {
    let result = super.call("GBTFactory", "GBTFactory():(address)", []);

    return result[0].toAddress();
  }

  try_GBTFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("GBTFactory", "GBTFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GNFTFactory(): Address {
    let result = super.call("GNFTFactory", "GNFTFactory():(address)", []);

    return result[0].toAddress();
  }

  try_GNFTFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("GNFTFactory", "GNFTFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  XGBTFactory(): Address {
    let result = super.call("XGBTFactory", "XGBTFactory():(address)", []);

    return result[0].toAddress();
  }

  try_XGBTFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall("XGBTFactory", "XGBTFactory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allowlist(param0: Address): boolean {
    let result = super.call("allowlist", "allowlist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_allowlist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("allowlist", "allowlist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  deployInfo(id: BigInt): GumballFactory__deployInfoResult {
    let result = super.call(
      "deployInfo",
      "deployInfo(uint256):(address,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return new GumballFactory__deployInfoResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBoolean()
    );
  }

  try_deployInfo(
    id: BigInt
  ): ethereum.CallResult<GumballFactory__deployInfoResult> {
    let result = super.tryCall(
      "deployInfo",
      "deployInfo(uint256):(address,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GumballFactory__deployInfoResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBoolean()
      )
    );
  }

  getTreasury(): Address {
    let result = super.call("getTreasury", "getTreasury():(address)", []);

    return result[0].toAddress();
  }

  try_getTreasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("getTreasury", "getTreasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gumballs(param0: BigInt): GumballFactory__gumballsResult {
    let result = super.call(
      "gumballs",
      "gumballs(uint256):(address,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new GumballFactory__gumballsResult(
      result[0].toAddress(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBoolean()
    );
  }

  try_gumballs(
    param0: BigInt
  ): ethereum.CallResult<GumballFactory__gumballsResult> {
    let result = super.tryCall(
      "gumballs",
      "gumballs(uint256):(address,address,address,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GumballFactory__gumballsResult(
        value[0].toAddress(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBoolean()
      )
    );
  }

  indexes(param0: Address): BigInt {
    let result = super.call("indexes", "indexes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_indexes(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("indexes", "indexes(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalDeployed(): BigInt {
    let result = super.call("totalDeployed", "totalDeployed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeployed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeployed",
      "totalDeployed():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _GBTFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _GNFTFactory(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _XGBTFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddExistingGumBallCall extends ethereum.Call {
  get inputs(): AddExistingGumBallCall__Inputs {
    return new AddExistingGumBallCall__Inputs(this);
  }

  get outputs(): AddExistingGumBallCall__Outputs {
    return new AddExistingGumBallCall__Outputs(this);
  }
}

export class AddExistingGumBallCall__Inputs {
  _call: AddExistingGumBallCall;

  constructor(call: AddExistingGumBallCall) {
    this._call = call;
  }

  get _gbt(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _xgbt(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _gnft(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AddExistingGumBallCall__Outputs {
  _call: AddExistingGumBallCall;

  constructor(call: AddExistingGumBallCall) {
    this._call = call;
  }
}

export class AddRewardCall extends ethereum.Call {
  get inputs(): AddRewardCall__Inputs {
    return new AddRewardCall__Inputs(this);
  }

  get outputs(): AddRewardCall__Outputs {
    return new AddRewardCall__Outputs(this);
  }
}

export class AddRewardCall__Inputs {
  _call: AddRewardCall;

  constructor(call: AddRewardCall) {
    this._call = call;
  }

  get _gumbarAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _rewardsToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddRewardCall__Outputs {
  _call: AddRewardCall;

  constructor(call: AddRewardCall) {
    this._call = call;
  }
}

export class AllowExistingCall extends ethereum.Call {
  get inputs(): AllowExistingCall__Inputs {
    return new AllowExistingCall__Inputs(this);
  }

  get outputs(): AllowExistingCall__Outputs {
    return new AllowExistingCall__Outputs(this);
  }
}

export class AllowExistingCall__Inputs {
  _call: AllowExistingCall;

  constructor(call: AllowExistingCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _bool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class AllowExistingCall__Outputs {
  _call: AllowExistingCall;

  constructor(call: AllowExistingCall) {
    this._call = call;
  }
}

export class DeployGumBallCall extends ethereum.Call {
  get inputs(): DeployGumBallCall__Inputs {
    return new DeployGumBallCall__Inputs(this);
  }

  get outputs(): DeployGumBallCall__Outputs {
    return new DeployGumBallCall__Outputs(this);
  }
}

export class DeployGumBallCall__Inputs {
  _call: DeployGumBallCall;

  constructor(call: DeployGumBallCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _URIs(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get _supplyBASE(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _supplyGBT(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _base(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _artist(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _delay(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _fees(): Array<BigInt> {
    return this._call.inputValues[8].value.toBigIntArray();
  }
}

export class DeployGumBallCall__Outputs {
  _call: DeployGumBallCall;

  constructor(call: DeployGumBallCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetGBTFactoryCall extends ethereum.Call {
  get inputs(): SetGBTFactoryCall__Inputs {
    return new SetGBTFactoryCall__Inputs(this);
  }

  get outputs(): SetGBTFactoryCall__Outputs {
    return new SetGBTFactoryCall__Outputs(this);
  }
}

export class SetGBTFactoryCall__Inputs {
  _call: SetGBTFactoryCall;

  constructor(call: SetGBTFactoryCall) {
    this._call = call;
  }

  get _GBTFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGBTFactoryCall__Outputs {
  _call: SetGBTFactoryCall;

  constructor(call: SetGBTFactoryCall) {
    this._call = call;
  }
}

export class SetGNFTFactoryCall extends ethereum.Call {
  get inputs(): SetGNFTFactoryCall__Inputs {
    return new SetGNFTFactoryCall__Inputs(this);
  }

  get outputs(): SetGNFTFactoryCall__Outputs {
    return new SetGNFTFactoryCall__Outputs(this);
  }
}

export class SetGNFTFactoryCall__Inputs {
  _call: SetGNFTFactoryCall;

  constructor(call: SetGNFTFactoryCall) {
    this._call = call;
  }

  get _GNFTFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetGNFTFactoryCall__Outputs {
  _call: SetGNFTFactoryCall;

  constructor(call: SetGNFTFactoryCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SetXGBTFactoryCall extends ethereum.Call {
  get inputs(): SetXGBTFactoryCall__Inputs {
    return new SetXGBTFactoryCall__Inputs(this);
  }

  get outputs(): SetXGBTFactoryCall__Outputs {
    return new SetXGBTFactoryCall__Outputs(this);
  }
}

export class SetXGBTFactoryCall__Inputs {
  _call: SetXGBTFactoryCall;

  constructor(call: SetXGBTFactoryCall) {
    this._call = call;
  }

  get _XGBTFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetXGBTFactoryCall__Outputs {
  _call: SetXGBTFactoryCall;

  constructor(call: SetXGBTFactoryCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateFactoryAllowlistCall extends ethereum.Call {
  get inputs(): UpdateFactoryAllowlistCall__Inputs {
    return new UpdateFactoryAllowlistCall__Inputs(this);
  }

  get outputs(): UpdateFactoryAllowlistCall__Outputs {
    return new UpdateFactoryAllowlistCall__Outputs(this);
  }
}

export class UpdateFactoryAllowlistCall__Inputs {
  _call: UpdateFactoryAllowlistCall;

  constructor(call: UpdateFactoryAllowlistCall) {
    this._call = call;
  }

  get _addr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _bool(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateFactoryAllowlistCall__Outputs {
  _call: UpdateFactoryAllowlistCall;

  constructor(call: UpdateFactoryAllowlistCall) {
    this._call = call;
  }
}

export class UpdateGumBallAllowlistCall extends ethereum.Call {
  get inputs(): UpdateGumBallAllowlistCall__Inputs {
    return new UpdateGumBallAllowlistCall__Inputs(this);
  }

  get outputs(): UpdateGumBallAllowlistCall__Outputs {
    return new UpdateGumBallAllowlistCall__Outputs(this);
  }
}

export class UpdateGumBallAllowlistCall__Inputs {
  _call: UpdateGumBallAllowlistCall;

  constructor(call: UpdateGumBallAllowlistCall) {
    this._call = call;
  }

  get _tokenAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _accounts(): Array<Address> {
    return this._call.inputValues[1].value.toAddressArray();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateGumBallAllowlistCall__Outputs {
  _call: UpdateGumBallAllowlistCall;

  constructor(call: UpdateGumBallAllowlistCall) {
    this._call = call;
  }
}
